List:
    It's an interface
    An ordered collection (also known as a sequence).
    The user of this interface has precise control over where in the list each element is inserted.
    The user can access elements by their integer index (position in the list), and search for elements in the list.

    List <String> player = new ArrayList<>();


Difference between using Collection and List as the reference:
    List has extra methods. Use List only if you need those extra methods.

    (E - type of elements in this list)

    Collection:
        boolean add (E e);
        boolean addAll (Collection<? extends E> c);

    List:
        boolean add (E e);
        void add (int index, E element);
        boolean addAll (Collection<? extends E> c);
        boolean addAll (int index, Collection<? extends E> c);

ArrayList:
    Main points:
    - Ordered collection
    - Duplicate values allowed
    - Not synchronized
        - can be synchronized but is not synchronized by default.

    More points:
    - re-sizable array, also called dynamic array.
        - grows it's size to accommodate new elements
        - shrinks the size when the elements are removed.
    - ArrayList internally uses an array to store the elements
        - Just like arrays, allows you to retrieve elements by their index.
    - allows null values.

    ArrayList <String> player = new ArrayList<>();
